import os
import io
import re
from typing import Optional

from fastapi import FastAPI, Request, Header, HTTPException
from fastapi.responses import JSONResponse

from cryptography.fernet import Fernet, InvalidToken

import qrcode
import numpy as np
import cv2  # opencv-python-headless

from telegram import Update, Bot
from telegram.error import TelegramError

# --- env config ---
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
FERNET_KEY = os.environ["FERNET_KEY"]
ALLOWED_USERNAMES = {
    u.strip().lower() for u in os.environ.get("ALLOWED_USERNAMES", "").split(",") if u.strip()
}
WEBHOOK_SECRET_TOKEN = os.environ.get("WEBHOOK_SECRET_TOKEN", "").strip()

bot = Bot(token=TELEGRAM_TOKEN)
fernet = Fernet(FERNET_KEY)
app = FastAPI(title="QR Cipher Bot")

# --- help text (ru) ---
HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø —à–∏—Ñ—Ä—É—é –§–ò–û –≤ QR –∏ —á–∏—Ç–∞—é –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ QR-–∫–æ–¥—ã.\n\n"
    "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
    "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–§–∞–º–∏–ª–∏—è –ò–º—è¬ª –∏–ª–∏ ¬´–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ¬ª "
    "(–¥–æ–ø—É—Å—Ç–∏–º—ã –∫–∏—Ä–∏–ª–ª–∏—Ü–∞/–ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –¥–µ—Ñ–∏—Å—ã). –Ø –∑–∞—à–∏—Ñ—Ä—É—é –∏ –ø—Ä–∏—à–ª—é QR.\n"
    "‚Ä¢ –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é, —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∏ –≤–µ—Ä–Ω—É –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.\n\n"
)

# --- fio –≤–∞–ª–∏–¥–∞—Ü–∏—è: 2 –∏–ª–∏ 3 —Å–ª–æ–≤–∞; –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã/–ª–∞—Ç–∏–Ω–∏—Ü—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ ---
NAME_RE = re.compile(
    r"^\s*"
    r"([A-Za-z–ê-–Ø–∞-—è–Å—ë]+(?:[-'][A-Za-z–ê-–Ø–∞-—è–Å—ë]+)*)\s+"          # —Ñ–∞–º–∏–ª–∏—è
    r"([A-Za-z–ê-–Ø–∞-—è–Å—ë]+(?:[-'][A-Za-z–ê-–Ø–∞-—è–Å—ë]+)*)"             # –∏–º—è
    r"(?:\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë]+(?:[-'][A-Za-z–ê-–Ø–∞-—è–Å—ë]+)*))?"     # –æ—Ç—á–µ—Å—Ç–≤–æ (–æ–ø—Ü.)
    r"\s*$"
)

# --- utils ---
def _is_allowed_username(update: Update) -> bool:
    # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º
    if not ALLOWED_USERNAMES:
        return True
    user = update.effective_user
    return bool(user and user.username and user.username.lower() in ALLOWED_USERNAMES)

def _normalize_fio(text: str) -> Optional[str]:
    """
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç ¬´–§–∞–º–∏–ª–∏—è –ò–º—è¬ª –∏–ª–∏ ¬´–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ¬ª –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç (Title Case, –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª).
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.
    """
    m = NAME_RE.match(text or "")
    if not m:
        return None
    parts = [p for p in m.groups() if p]
    # title case –±–µ—Ä–µ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∏–≤–∞–Ω-–ø–µ—Ç—Ä–æ–≤" -> "–ò–≤–∞–Ω-–ü–µ—Ç—Ä–æ–≤"
    norm = " ".join(p.strip().title() for p in parts)
    return norm

def _encrypt_text(text: str) -> str:
    token = fernet.encrypt(text.encode("utf-8"))
    return token.decode("utf-8")

def _decrypt_text(token: str) -> str:
    return fernet.decrypt(token.encode("utf-8")).decode("utf-8")

def _make_qr_png_bytes(payload: str) -> bytes:
    # –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —á—ë—Ä–Ω–æ-–±–µ–ª—ã–π qr –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ä–∞–º–æ–∫
    qr = qrcode.QRCode(border=2, box_size=8)
    qr.add_data(payload)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    return buf.getvalue()

async def _download_photo_as_ndarray(file_id: str) -> np.ndarray:
    """
    –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ telegram api –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤ ndarray (bgr) –¥–ª—è opencv.
    –≤–∞–∂–Ω–æ: –º–µ—Ç–æ–¥—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤ ptb v21 (await get_file; await download_as_bytearray)
    """
    tg_file = await bot.get_file(file_id)
    data = await tg_file.download_as_bytearray()
    arr = np.frombuffer(data, dtype=np.uint8)
    img = cv2.imdecode(arr, cv2.IMREAD_COLOR)
    if img is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    return img

def _decode_qr(img_bgr: np.ndarray) -> Optional[str]:
    """
    –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π qr —á–µ—Ä–µ–∑ opencv.
    """
    detector = cv2.QRCodeDetector()
    text, points, _ = detector.detectAndDecode(img_bgr)
    if text:
        return text
    texts, points, _ = detector.detectAndDecodeMulti(img_bgr)
    if texts:
        for t in texts:
            if t:
                return t
    return None

# --- handlers ---
async def _handle_start(update: Update):
    chat_id = update.effective_chat.id
    if _is_allowed_username(update):
        await bot.send_message(chat_id, HELP_TEXT)
    else:
        await bot.send_message(chat_id, "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

async def _handle_text(update: Update):
    chat_id = update.effective_chat.id
    raw = (update.effective_message.text or "").strip()
    if raw.startswith("/start"):
        await _handle_start(update)
        return

    fio = _normalize_fio(raw)
    if not fio:
        await bot.send_message(
            chat_id,
            "–û—Ç–ø—Ä–∞–≤—å –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–§–∞–º–∏–ª–∏—è –ò–º—è¬ª –∏–ª–∏ ¬´–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ¬ª.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: ¬´–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω¬ª, ¬´–°–º–∏—Ä–Ω–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞¬ª, ¬´–°–∞–Ω–∏–Ω-–ü–µ—Ç—Ä–æ–≤ –ê—Ä—Ç—ë–º¬ª."
        )
        return

    token = _encrypt_text(fio)
    png = _make_qr_png_bytes(token)
    await bot.send_photo(
        chat_id=chat_id,
        photo=png,
        caption="–ì–æ—Ç–æ–≤–æ ‚úÖ\n–≠—Ç–æ QR —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –§–ò–û."
    )

async def _handle_photo(update: Update):
    chat_id = update.effective_chat.id
    photos = update.effective_message.photo
    if not photos:
        await bot.send_message(chat_id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    file_id = photos[-1].file_id  # –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
    try:
        img = await _download_photo_as_ndarray(file_id)
        qr_text = _decode_qr(img)
        if not qr_text:
            await bot.send_message(chat_id, "QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω üòï")
            return
        try:
            plain = _decrypt_text(qr_text)
        except InvalidToken:
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ QR.")
            return
        await bot.send_message(chat_id, f"–£—Å–ø–µ—Ö ‚úÖ\n\n{plain}")
    except Exception as e:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

# --- routes ---
@app.get("/health")
def health():
    return {"ok": True}

@app.post("/webhook")
async def telegram_webhook(
    request: Request,
    x_telegram_bot_api_secret_token: Optional[str] = Header(default=None)
):
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if WEBHOOK_SECRET_TOKEN and x_telegram_bot_api_secret_token != WEBHOOK_SECRET_TOKEN:
        raise HTTPException(status_code=401, detail="Bad secret token")

    payload = await request.json()

    try:
        update = Update.de_json(payload, bot)
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid Telegram update")

    msg = update.effective_message
    if msg is None:
        return {"status": "ok"}

    # /start –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —è–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö, –∏ –¥–ª—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö
    if msg.text and msg.text.strip().startswith("/start"):
        await _handle_start(update)
        return {"status": "ok"}

    # –æ–±—â–∏–π allow-–ª–∏—Å—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not _is_allowed_username(update):
        await bot.send_message(update.effective_chat.id, "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return JSONResponse({"status": "ignored"}, status_code=200)

    # –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    if msg.photo:
        await _handle_photo(update)
    elif msg.text:
        await _handle_text(update)
    else:
        await bot.send_message(msg.chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û (—Ç–µ–∫—Å—Ç) –∏–ª–∏ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º.")

    return {"status": "ok"}
